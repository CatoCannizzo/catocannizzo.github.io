---
import { Code } from "astro:components";
import WriteUpLayout from "@/layouts/WriteUpLayout.astro";
import Image from "astro/components/Image.astro";
import Landscape from "@/assets/portfolioaccessibility/LandscapePic.jpg";
import Achromatopsia from "@/assets/portfolioaccessibility/Achromatopsia.png";
import Deuteranopia from "@/assets/portfolioaccessibility/Deuteranopia.png";
import NormalColors from "@/assets/portfolioaccessibility/NormalColors.png";
import Protanopia from "@/assets/portfolioaccessibility/Protanopia.png";
import Tritanopia from "@/assets/portfolioaccessibility/Tritanopia.png";
import OptimizedCarousel from "@/components/OptimizedCarousel.astro";
import Contrast from "@/assets/portfolioaccessibility/Contrast.png";

const colorAccessibilityPics = [
  {
    src: NormalColors,
    alt: "Home screen of Cato's portfolio.",
  },
  {
    src: Protanopia,
    alt: "Home screen of Cato's portfolio viewed with protanopia, where all green highlights now look yellow.",
  },
  {
    src: Deuteranopia,
    alt: "Home screen of Cato's portfolio viewed with dueteranopia, where once again the green highlights look yellow",
  },
  {
    src: Tritanopia,
    alt: "Home screen of Cato's portfolio viewed with tritanopia, where yellow now looks pink, and the green and blue look turquoise.",
  },
  {
    src: Achromatopsia,
    alt: "Home screen of Cato's portfolio in greyscale.",
  },
];
---

<WriteUpLayout title="Portfolio Accessibility">
  <h1>Portfolio Accessibility</h1>
  <section>
    <h2>Overview</h2>
    <p>
      One of the most important roles a UX designer can take on is as an
      advocate for accessibility. Extending a system so that it can be used by
      people of any ability creates user flows that benefit everyone. This is
      known as the curb-cut effect and <a
        href="https://inclusive.microsoft.design/">
        microsoft has a brilliant accessibility article</a
      > on why it is helpful for a wider audience than just those a system is targeted
      to be extended to.
    </p><p>
      To give an insight into my design methodology this case study will explain
      my considerations when updating a website to follow Web Content
      Accessibility Guidelines (WCAG) and to comply with the United States
      Department of Justice <a
        href="https://www.ada.gov/resources/web-guidance/"
        >online Americans with Disabilities Act requirements</a
      >. I divide the accessibility guidelines into 3 overarching sections. In
      each section I will discuss relevant standards, and showcase the tests and
      code I use to achieve them.
    </p>
    <ul>
      <li>
        <a href="#Color"
          ><span class="sr-only">jump to section</span>Color Accessibility</a
        >
      </li>
      <li>
        <a href="#Keyboard"
          ><span class="sr-only">jump to section</span>Keyboard Accessibility</a
        >
      </li>
      <li>
        <a href="#Screen-Reader"
          ><span class="sr-only">jump to section</span>Screen Reader
          Accessibility</a
        >
      </li>
    </ul>
  </section>
  <section id="Color" class="scroll-mt-20">
    <h2>Color Accessibility</h2>
    <p>
      The first "standard" in color accessibility that I check is a color blind
      contrast check. Standard is in quotes here because WCAG do not actually
      regulate the color combinations that a website can use. <a
        href="https://webaim.org/articles/contrast/#sc141">WCAG section 1.4.1</a
      > instead opts to say that color should not be the only visual means of conveying
      information. So while I still like to open a website and apply filters to simulate
      each vision deficiency this is more to inform my design side how the colors
      I chose can be perceived. The actual test is to make sure that each color used
      to convey meaning is supplemented with another visual form of indication.
    </p>

    <p>
      Below is my website viewed with no filter, no red (Protanopia), no green
      (Deuteranopia), no blue (Tritanopia), and finally greyscale
      (Achromatopsia) filters. In each image it is important to determine if
      each colored element can still be differentiated for its intended role.
    </p>
    <figure class="mx-auto flex max-w-xs flex-col sm:max-w-2xl">
      <OptimizedCarousel imgArray={colorAccessibilityPics} /><figcaption>
        My color scheme uses a green, yellow, and blue designed to be
        reminiscent of a <div
          tabindex="0"
          class="tooltip group relative inline-block font-medium text-[var(--tw-prose-links)] underline">
          mountain landscape <span
            class="tooltipcontent absolute bottom-full left-0 z-50 hidden w-64 after:absolute after:left-0 after:top-full after:ml-5 after:border-8 after:border-solid after:border-transparent after:border-t-card after:bg-transparent group-hover:block group-focus:block"
            ><div class="h-[194px] w-[256px] rounded bg-card p-2">
              <Image
                src={Landscape}
                class="not-prose rounded-sm"
                alt="Mountains at sunset"
                width="240"
              />
            </div></span
          >
        </div>.
      </figcaption>
    </figure>

    <p>
      In Achromatopsia the role of colors gets removed entirely, allowing us to
      see the websites hierarchy without any color, and really test if we reach
      WCAGS 1.4.1 standard. And websites that reach that standard also give
      users the ability to safely force color changes to websites on the client
      side furthing its accessibility and customizability for all.
    </p><p>
      After the color scheme is chosen my next step is to ensure text
      legibility. All text colors and the background colors behind them need to
      have a minimum 4.5:1 contrast to their respective background in accordance
      with the WCAG AA standard. To prevent having to test every combination of
      text color and background color on a website I set two or three text
      colors and assign one to each color in the color scheme. Then when
      combined with text link colors I have two combinations of text color to
      test for each background color that I use.
    </p>
    <figure class="flex flex-col items-center">
      <Image
        src={Contrast}
        alt="Light text on a blue background has 4.83 contrast "
        class="rounded"
      /><figcaption>
        The worst contrast I have are my light mode color scheme for out-of-site
        links at 4.83. This gives it an AA rating on the WCAG contrast scale.
      </figcaption>
    </figure>
  </section>
  <section id="Keyboard" class="scroll-mt-20">
    <h2>Keyboard Accessibility</h2>
    <p>
      I subdivide <a
        href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/keyboard-operation.html"
        >WCAG 2.1 guideline: keyboard accessible</a
      >, into a 3 part funnel. First I make the website navigable by keyboard,
      next I provide ease of navigation by adding skip links, and finally I
      ensure quality of navigation by making micro interaction active on
      keyboard. This helps me avoid the most common failure criterion having
      pointing-device-specific event handlers. (Yes even my home page welcome
      image can be interacted with through a keyboard)
    </p><p>
      Since I new from starting to work on my portfolio that I wanted it to meet
      keyboard accessibility guidelines, I saved myself some time and used
      component library that has a focus on accessibility - <a
        href="https://ui.shadcn.com/">
        ShadcnUI</a
      >. Boom, just by the use of keyboard accessible components a website is
      80% of the way to being keyboard compliant, and definitely keyboard
      navigable.
    </p><p>
      The next part of keyboard accessibility is to have ways to skip to
      specific content. This starts by adding a 'skip to content' button before
      the sites nav bar. My is hidden until it recieves focus, but to find it
      after clicking around the page just click on my green header and shift tab
      a couple times. Next I add skip to section links at the top of any
      'content' pages.
    </p>
    <p>
      Then the last part of my keyboard design 'funnel' is just making sure that
      any hover effect on the page, are dublicated for focus too. This is
      especially important for tooltips, like those you might see on social link
      icons, and appreciated for micro interactions like a change of color, or
      movement.
    </p>
    <p>
      Then the most important part of keyboard accessibility is to test it! I
      tested each component in a development server by moving around my website
      with my keyboard going throug a checklist of interactions. This showed me
      that my original lighbox component library I was using produced a bug. The
      lightbox library would lose tab focus when closed with keyboard controls
      which would then revert the window back to the top of the page. A lightbox
      causing the window height to reset when closed with a keyboard might not
      even be noticed if a user just explores the website via touch, or with a
      mouse. However, this issue also serves as a great example of how a website
      being keyboard accessibile extends to normal users e.g. someone took their
      hand off the mouse when taking notes on a potential job applicant üòâ they
      might then closing the lightbox using the ‚Äúesc‚Äù key instead of with a
      mouse.
    </p>
  </section>
  <section id="Screen-Reader" class="scroll-mt-20">
    <h2>Screen Reader Accessibility</h2><p>
      Finally comes screen reader accessibility, and this is such a multifaceted
      issue that multiple WCAG guidlines apply. So instead of listing them all I
      will again focus on the steps I took for my website. The most basic of
      which might be <a
        href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms.html"
        >WCAG guideline 2.4</a
      > which is to ensure the site has good structure, for the screen reader to
      latch onto. This includes using the ‚Äúlandmark‚Äù html elements like &lt;header&gt;,
      &lt;nav&gt;, &lt;body&gt;, &lt;section&gt;, &lt;article&gt;, &lt;aside&gt;,
      and &lt;footer&gt; and to use &lt;H&gt; tags sequentially. Next buttons should
      be inside &lt;button&gt; tags or have an appropriate aria-role attribute if
      custom made and links should be treated like-wise and should avoid using 'target='_blank''
      attribute.
    </p>
    <p>
      Then it is just a matter of adding in information that sighted users get
      by visual relationships or from images. For me this meant going through
      all anchor tags on my website, including section links, or image full
      screen tags and ensuring they were descriptive of what they opened
      including size and file type, and where they opened it. While this could
      make the links clunky, a common approach is to add this description in
      invisible span tags, and for sighted users is to add 'title' tags to links
      so that additional information is available on hover.
    </p>

    <p>
      Another place that can be tricky to impliment accessibility for screen
      readers is with any pop up modal. In my portfolio these are found with the
      'click-to-fullscreen' images in some of my case studies. The most
      important thing to keep in mind is that opening a modal should 'lock' the
      rest of the page preventing it from changing or being interacted with.
      Once that has been accomplished the next focus of an accessibility minded
      developer should be 'focus.' The focused element when the modal opens
      should be on a non-destructive option, this is especially prevelant for
      modals that pop up for deletion events. And focus when the modal closes
      needs to return to the button the prompted the modal to open. (I talk
      about my own issue with this briefly under my keyboard accessibility
      section.) Additionally to help increase the accessibility of these modals,
      I provided aria-live status updates for when the image is full screened
      and closed. While this feature is not required, it took me all of 11 short
      lines code to implement. I have shared the code below to show just how
      easy it can be to add accessibility features.
    </p>
    <Code
      code={`//HTML in page
<div role="status" id="generalAlerts" class="sr-only"></div>

// JS
lightbox.on("firstUpdate", () => {
  sendUpdate("image fullscreened");
});
lightbox.on("destroy", () => {
  sendUpdate("image closed");
});
lightbox.init();

function sendUpdate(currentStatus: String) {
  const statusBox = document.getElementById("generalAlerts");
  if (statusBox instanceof HTMLElement) {
    statusBox.innerHTML = \`\${currentStatus}\`;
}}`}
      lang="js"
      theme="dark-plus"
    />

    <p>
      Finally I tested my website by grabbing the microsoft Narrator, android
      Talkback, and the one of the most popular third party readers NVDA to
      ensure all alerts, carousels, links and general site navigation worked as
      intended.
    </p>
  </section>

  <section>
    <h2>Summary</h2>
    Designing for accessibility can be intimidating especially considering just like
    in the early days of CSS each screen reader has slightly different compatibility
    and edgecases for advanced html elements. But by dividing accessibility up into
    sections it becomes much more approachable. The WCAG and Section 510 also provide
    clear and consistent targets to check against, even if admittedly they can be
    a little verbose. Most importantly, however, by making a website accessible,
    you not only increase the audience for the website but also make it a better
    experience for normal users. From allowing quick keyboard shortcuts so a user
    does not have to mouse across the entire screen, to enforcing clear and simple
    information presentation I hope I have showcased why accessible design is important
    for all.
  </section>
</WriteUpLayout>
