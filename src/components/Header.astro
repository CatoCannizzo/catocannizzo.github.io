---
import MobileNav from "@comps/reactComps/MobileNav";
import Navbar from "@comps/reactComps/Navbar";
import ThemeIcon from "@comps/ThemeIcon.astro";
import UpButton from "@/components/Buttons/UpButton.astro";

interface Props {
  upbutton?: boolean;
}
const { upbutton } = Astro.props;
---

<!-- StickyHeader styling is done as a class in global.css-->
<div id="headerContainer" class="sticky z-40 mx-10 transition-all duration-300">
  <header
    id="header"
    class="stickyHeader mx-auto flex h-fit max-w-5xl items-center rounded-b-lg px-3 py-1">
    <a href="/" aria-label="Navigate to portfolio home page" class="mr-auto">
      <!--  -->
      <svg
        class="h-16 w-16 fill-current stroke-2 text-primary"
        viewBox="0 0 110 96">
        <g>
          <path
            d="M77 0a48 48 0 0 0-7 1l10 6a42 42 0 0 1 6-1 42 42 0 0 1 22 7h2A48 48 0 0 0 77 0zM56 11l-10 1a48 48 0 0 0-17 36 48 48 0 0 0 17 36 38 38 0 0 0 20 0 42 42 0 0 1-18-20 42 42 0 0 1-2-4 42 42 0 0 1 0-1 42 42 0 0 1-1-5 42 42 0 0 1-1-6 42 42 0 0 1 22-36l-10-1zm52 72a42 42 0 0 1-22 6 42 42 0 0 1-6 0l-10 6a48 48 0 0 0 7 1 48 48 0 0 0 33-13z">
          </path>
          <path
            d="M48 0A48 48 0 0 0 0 48a48 48 0 0 0 3 15 48 48 0 0 0 0 2 48 48 0 0 0 1 1 48 48 0 0 0 44 30 48 48 0 0 0 33-13h-3a42 42 0 0 1-22 7 42 42 0 0 1-41-42A42 42 0 0 1 56 7a42 42 0 0 1 22 6h3A48 48 0 0 0 48 0z">
          </path>
        </g>
      </svg>
    </a>
    <div class="bg hidden sm:flex">
      <Navbar isVert={false} client:visible />
    </div>
    <MobileNav client:visible />
    <div class="px-2"><ThemeIcon /></div>
  </header>
</div>
{upbutton && <UpButton />}

<script>
  //!? Typescript typeguard
  function isHTMLElement(ele: unknown): ele is HTMLElement {
    return ele instanceof HTMLElement;
  }

  // Hide Header on on scroll down
  var didScroll = true;
  var backGroundAdded = false;
  var lastScrollTop = 0;
  var delta = 5;
  var navbarHeight = 140;

  document.addEventListener("scroll", (event) => {
    didScroll = true;
  });

  setInterval(function () {
    if (didScroll) {
      hasScrolled();
      didScroll = false;
    }
  }, 250);

  function hasScrolled() {
    var st = window.scrollY;
    // Make sure they scroll more than delta
    if (Math.abs(lastScrollTop - st) <= delta) return;
    const headCont = document.getElementById("headerContainer");
    const header = document.getElementById("header");

    if (!isHTMLElement(headCont)) {
      throw new Error("The headerContainer element was not found");
    }
    if (!isHTMLElement(header)) {
      throw new Error("The Header element was not found");
    }
    // If they scrolled down and are past the navbar, add class .nav-up.
    // This is necessary so you never see what is "behind" the navbar.
    if (st > lastScrollTop && st > navbarHeight) {
      // Scroll Down

      headCont.classList.remove("top-0");
      headCont.classList.add("top-[-100px]");
      if (!backGroundAdded) {
        header.classList.add("bg-accent/[98%]");
        backGroundAdded = true;
      }
    } else {
      // Scroll Up
      if (st < lastScrollTop) {
        headCont.classList.add("top-0");
        headCont.classList.remove("top-[-100px]");
        if (st < 50) {
          header.classList.remove("bg-accent/[98%]");
          backGroundAdded = false;
        }
      }
    }
    // Repeated movement of head cont for upbutton if present
    const upButton = document.getElementById("upButton");
    if (!upButton) {
      lastScrollTop = st;
      return;
    }
    if (st > lastScrollTop && st > navbarHeight) {
      // Scroll Down
      upButton.classList.remove("bottom-10");
      upButton.classList.add("bottom-[-74px]");
    } else {
      // Scroll Up
      if (st < lastScrollTop) {
        upButton.classList.add("bottom-10");
        upButton.classList.remove("bottom-[-74px]");
      }
    }
    lastScrollTop = st;
  }
</script>
